// Copyright (C) 2021 Intel Corporation
// SPDX-License-Identifier: MIT
//
// This file originally generated by etw_list
//     version:    development branch eac9f50de60cecc6d5b93392fa06f2abee176ff8
//     parameters: --show=all --output=c++ --event=QueueTimers::Info --event=QueueTimers::Start --event=QueueTimers::Stop --event=CpuGpuSync::Start --event=CpuGpuSync::Stop --provider=Intel-Graphics-D3D10
#pragma once

namespace Intel_Graphics_D3D10 {

struct __declspec(uuid("{AD367E62-97EF-4B20-8235-E8AB49DB0C23}")) GUID_STRUCT;
static const auto GUID = __uuidof(GUID_STRUCT);

enum class Keyword : uint64_t {
    kCritical                    = 0x1,
    kDdiResourceFlow             = 0x2,
    kPAVP                        = 0x4,
    kGenericDebug_Event          = 0x10,
    kGPA                         = 0x20,
    kResidency                   = 0x40,
    kKmthandle                   = 0x80,
    kThreadId                    = 0x100,
    kUmdalias                    = 0x200,
    kVa_Mapping                  = 0x400,
    kVa_Patching                 = 0x800,
    kVerbose                     = 0x1000,
    kDdi                         = 0x2000,
    kDynamicBuffers              = 0x10000,
    kQueueTimer_Event            = 0x20000,
    kCpuGpuSync_Event            = 0x40000,
    cIntelGraphicsD3D10_Analytic = 0x8000000000000000,
};

enum class Level : uint8_t {
    win_LogAlways     = 0x0,
    win_Critical      = 0x1,
    win_Error         = 0x2,
    win_Informational = 0x4,
};

enum class Channel : uint8_t {
    cIntelGraphicsD3D10_Analytic = 0x10,
};

// Event descriptors:
#define EVENT_DESCRIPTOR_DECL(name_, id_, version_, channel_, level_, opcode_, task_, keyword_) struct name_ { \
    static uint16_t const Id      = id_; \
    static uint8_t  const Version = version_; \
    static uint8_t  const Channel = channel_; \
    static uint8_t  const Level   = level_; \
    static uint8_t  const Opcode  = opcode_; \
    static uint16_t const Task    = task_; \
    static Keyword  const Keyword = (Keyword) keyword_; \
};

EVENT_DESCRIPTOR_DECL(CpuGpuSync_Start , 0x000f, 0x00, 0x10, 0x00, 0x01, 0x0003, 0x8000000000040000)
EVENT_DESCRIPTOR_DECL(CpuGpuSync_Stop  , 0x0010, 0x00, 0x10, 0x00, 0x02, 0x0003, 0x8000000000040000)
EVENT_DESCRIPTOR_DECL(QueueTimers_Start, 0x003b, 0x00, 0x10, 0x00, 0x01, 0x0010, 0x8000000000020000)
EVENT_DESCRIPTOR_DECL(QueueTimers_Info , 0x003c, 0x00, 0x10, 0x00, 0x00, 0x0010, 0x8000000000020000)
EVENT_DESCRIPTOR_DECL(QueueTimers_Stop , 0x003d, 0x00, 0x10, 0x00, 0x02, 0x0010, 0x8000000000020000)

#undef EVENT_DESCRIPTOR_DECL

// These enums added manually:
enum QUEUE_TIMER_TYPE {
    WAIT_IF_FULL_TIMER                              = 0x00000000,   ///< Producer wait if queue is full
    WAIT_UNTIL_EMPTY_SYNC_TIMER                     = 0x00000001,   ///< Wait for queue to empty, on Sync
    WAIT_UNTIL_EMPTY_SYNC_ASYNC_TIMER               = 0x00000002,   ///< Wait for queue to empty, on Sync from async DDI
    WAIT_UNTIL_EMPTY_DRAIN_TIMER                    = 0x00000003,   ///< Wait for queue to empty, on Drain
    WAIT_UNTIL_EMPTY_DRAIN_ASYNC_TIMER              = 0x00000004,   ///< Wait for queue to empty, on Drain from async DDI
    WAIT_FOR_FENCE                                  = 0x00000005,   ///< Wait for Consumer fence
    WAIT_UNTIL_FENCE_SUBMITTED                      = 0x00000006,   ///< Wait for fence submitted to HW.

    WAIT_IF_EMPTY_TIMER                             = 0x00000007,   ///< Consumer waits if queue is empty

    FRAME_TIME_APP                                  = 0x00000008,   ///< Frame time as seen by the App (producer)
    FRAME_TIME_DRIVER                               = 0x00000009,   ///< Frame time as seen by the driver (consumer)
    QUEUE_TIMER_COUNT                               = 0x0000000a,   ///< Count of timers
};

enum SYNC_TYPE {
    SYNC_TYPE_WAIT_SYNC_OBJECT_CPU,
    SYNC_TYPE_WAIT_SYNC_OBJECT_GPU,
    SYNC_TYPE_POLL_ON_QUERY_GET_DATA,

    SYNC_TYPE_COUNT
};

}
