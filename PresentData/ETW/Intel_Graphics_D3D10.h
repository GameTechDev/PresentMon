/*
Copyright Fri 02 Intel Corporation

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#pragma once
// This file originally generated by etw_list
//     version:    development branch 2f1a9255090566adda00745e8dc8813539db1d54
//     parameters: --show=all --output=c++ --event=QueueTimers::Info --event=QueueTimers::Start --event=QueueTimers::Stop --provider=Intel-Graphics-D3D10

namespace Intel_Graphics_D3D10 {

struct __declspec(uuid("{AD367E62-97EF-4B20-8235-E8AB49DB0C23}")) GUID_STRUCT;
static const auto GUID = __uuidof(GUID_STRUCT);

enum class Keyword : uint64_t {
    kCritical                    = 0x1,
    kDdiResourceFlow             = 0x2,
    kPAVP                        = 0x4,
    kDdi                         = 0x8,
    kGenericDebug_Event          = 0x10,
    kGPA                         = 0x20,
    kResidency                   = 0x40,
    kKmthandle                   = 0x80,
    kThreadId                    = 0x100,
    kUmdalias                    = 0x200,
    kVa_Mapping                  = 0x400,
    kVa_Patching                 = 0x800,
    kVerbose                     = 0x1000,
    kDdiL0                       = 0x2000,
    kDdiL1                       = 0x4000,
    kDdiL2                       = 0x8000,
    kDynamicBuffers              = 0x10000,
    kQueueTimer_Event            = 0x20000,
    kCpuGpuSync_Event            = 0x40000,
    cIntelGraphicsD3D10_Analytic = 0x8000000000000000,
};

enum class Level : uint8_t {
    win_LogAlways     = 0x0,
    win_Critical      = 0x1,
    win_Error         = 0x2,
    win_Informational = 0x4,
};

enum class Channel : uint8_t {
    cIntelGraphicsD3D10_Analytic = 0x10,
};

// Event descriptors:
#define EVENT_DESCRIPTOR_DECL(name_, id_, version_, channel_, level_, opcode_, task_, keyword_) struct name_ { \
    static uint16_t const Id      = id_; \
    static uint8_t  const Version = version_; \
    static uint8_t  const Channel = channel_; \
    static uint8_t  const Level   = level_; \
    static uint8_t  const Opcode  = opcode_; \
    static uint16_t const Task    = task_; \
    static Keyword  const Keyword = (Keyword) keyword_; \
};

EVENT_DESCRIPTOR_DECL(QueueTimers_Start, 0x003b, 0x00, 0x10, 0x00, 0x01, 0x0010, 0x8000000000020000)
EVENT_DESCRIPTOR_DECL(QueueTimers_Info , 0x003c, 0x00, 0x10, 0x00, 0x00, 0x0010, 0x8000000000020000)
EVENT_DESCRIPTOR_DECL(QueueTimers_Stop , 0x003d, 0x00, 0x10, 0x00, 0x02, 0x0010, 0x8000000000020000)

#undef EVENT_DESCRIPTOR_DECL

#pragma warning(push)
#pragma warning(disable: 4200) // nonstandard extension used: zero-sized array in struct

#pragma pack(push)
#pragma pack(1)

struct QueueTimers_Start_Struct {
    uint32_t    value;
};

struct QueueTimers_Info_Struct {
    uint32_t    value;
};

struct QueueTimers_Stop_Struct {
    uint32_t    value;
};


//Manually added:
/// @brief Specifies avalible queue timers
enum QUEUE_TIMER_TYPE
{
    WAIT_IF_FULL_TIMER                              = 0x00000000,   ///< Producer wait if queue is full
    WAIT_UNTIL_EMPTY_SYNC_TIMER                     = 0x00000001,   ///< Wait for queue to empty, on Sync
    WAIT_UNTIL_EMPTY_SYNC_ASYNC_TIMER               = 0x00000002,   ///< Wait for queue to empty, on Sync from async DDI
    WAIT_UNTIL_EMPTY_DRAIN_TIMER                    = 0x00000003,   ///< Wait for queue to empty, on Drain
    WAIT_UNTIL_EMPTY_DRAIN_ASYNC_TIMER              = 0x00000004,   ///< Wait for queue to empty, on Drain from async DDI
    WAIT_FOR_FENCE                                  = 0x00000005,   ///< Wait for Consumer fence
    WAIT_UNTIL_FENCE_SUBMITTED                      = 0x00000006,   ///< Wait for fence submitted to HW.

    WAIT_IF_EMPTY_TIMER                             = 0x00000007,   ///< Consumer waits if queue is empty

    FRAME_TIME_APP                                  = 0x00000008,   ///< Frame time as seen by the App (producer)
    FRAME_TIME_DRIVER                               = 0x00000009,   ///< Frame time as seen by the driver (consumer)
    WAIT_TIMERS_COUNT                               = 0x0000000a,   ///< Count of timers
};

#pragma pack(pop)
#pragma warning(pop)

}
